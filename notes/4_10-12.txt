string s;
s("Hello!"); // Error!
string s("Hello!");
===============================================
void h()
{
  String s("hello");  // my own String type
  ...;
}                     // When function ends, local var s goes away, and we don't call delete... Will cause storage we can't use anymore.
void f(String t)
{
  String u("Hello");
  ...;
  u = t;              // Assignment is different from construction. The default assignment operator is assign every class member.
  ...;                // When assign a class, the instance will call u.operator=(t); which is equal to the syntax: u = t;
}                     // l = k = m ==> l = (k = m) After assignment, the operator can return the left-hand-side.

int main()
{
  String t;
  String t(""); // Is exact the same trick
  for (...)
    h();
  ...;
  String s("Hello");
  f(s);  // Will copy s, need a copy constructor otherwise will free memory twice.
  ...;
}
===============================================
class String
{
  public:
    String(const char* value = "");
    String(const String& other); // Copy constructor.
    void operator=(const String& rhs);
    // String operator=(const String& rhs); NOT QUITE RIGHT...
    String& operator=(const String& rhs);  // Why reference?
    ~String();
    ...;
  private:
      // Class invariant:
      //   m_text points to a dynamically allocated array of m_len+1 chars
      //   m_len >= 0
      //   m_len == strlen(m_text)
      // OR
      //   m_text == nullptr
      //   m_len == 0
    char* m_text;  // For flexibility
    int m_len;
};
===============================================
#include <cstring>
using namespace std;

String::String(const char* value)
{
  m_len = strlen(value);
  if (m_len == 0)
    m_text = nullptr;
  else
  {
  // Use copy of value, instead of just point to the original var, because we don't want to change the original one.
  // Don't foget \0 char 
  m_text = new char[m_len+1];
  strcpy(m_text, value);
  }
}

// Can do no para input 
String::String(const char* value)
{
  if (value == nullptr)
    value = ""; // The const means we can't modify the content of the pointer points, but we can let pointer point to other object.
  m_len = strlen(value); // Use "" to indicate it's a string.
  m_text = new char[m_len+1];
  // m_text[0] = '\0';
  strcpy(m_text, value);
}

// Copy constructor
String::String(const String other)   // WRONG
String::String(const String& other)  // Better to make const to the original one. If there is inner class instance, use initial list.
{
  m_len = other.m_len; // member funtion of this class can access other instance of this class.
  // Don't use m_text = other.m_text; because it will copy the pointer, not the array.
  m_text = new char* [m_len + 1];
  strcpy(m_text, other.m_text);
}

// Operator equal
String& String::operator=(const String& rhs)
{
  if (this != &rhs){  // If the object assigns itself, skip the operation and return its reference
    delete [] m_text; // First free the memory
    m_len = rhs.m_len;
    m_text = new char[m_len + 1];
    strcpy(m_text, rhs.m_text);
  }
  return *this;
}

// Deconstructor
String::~String()
{
  delete [] m_text;
}
===============================================
FREE MOMERY
// C++ use new to allocate new memory, make sure use the appropriate delete methods.
Blah* bp = new Blah;
...
delete bp;

Blah* bpa = new Blah[...];  // Allocate an array in the memory
...
delete [] bpa;
------------------------------
// What if value is a nullptr?
String u(nullptr);

char* p = f(..., ..., ...);
String v(p);
===============================================
  _____        ______________
 | ptr |-----> |h|e|l|l|o|\0|
 -------
 | int |<----length of string
 -------

Different implementation in constructor:
  _______           ______
 |nullptr|         |      |------> '\0'
 ---------   VS    --------
 |  int  |         |  int |
 ---------         --------
// Second one is much easier to implement and construct, but use more instructions (time) and spaces.

