Double Linked List
==================

Don't do things in the wrong order
Advice: If you're creating a new Node, set the values in the new Node first.

Always check normal (middle), fromt, back, empty, one-element
                       ____       ____      ____
               head-->| 23 |     | 85 |    | 42 |<--tail
                      ------     ------    ------
                      |next|---->|next|--->|next|--->nullptr
                      ------     ------    ------
            nullptr<--|prev|<----|prev|<---|prev|
                      ------     ------    ------

When delete tail list, check if it's also pointed by head.

Make cirle linked list: tail's next point to head list, will eliminate many special cases. A tech is to add one more Node in the head
		    
 Dummy Node
      |
head  |
    ____        ____       ____      ____
   |    |      | 23 |     | 85 |    | 42 |<--tail
   ------      ------     ------    ------
   |    |      |next|---->|next|--->|next|--->nullptr
   ------      ------     ------    ------
   |    |<-----|prev|<----|prev|<---|prev|
   ------      ------     ------    ------

Dummy Node let the code works for empty node or other special cases. But check iterator points to the head list, because head pointer always points to dummy node.

LIFO
====
Structure: last in first out
          top
  push-->|   |--->pop
         |   |
         |   |
         |   |
         -----
Stack
-----
Create an empty stack
Push an item onto the stack
Pop an item from the stack
Look at the top of the stack
Is the stack empty?
>>>>>>>>>>>>>>>>>>>
Look at any item in the stack
How many items are in the stack?

#include <stack>
using namespace std;

int main()
{
	  // Declaring a stack will hold int.
	stack<int> s;
	s.push(10);
	s.push(20);
	  // n will be 20.
	int n = s.top();
	  // 20 will be removed. C++ library pop() won't return the top item in the stack, it returns void.
	s.pop();
	if ( ! s.empty())
	{
		  // size() still works if stack is empty.
		cout << s.size() << endl;
		...;
	}
}

Why use stack instead of array?
A: For restriction. Hide details from users. Make operations simple.

Implementation
--------------
          0   1  2  3 ...
          __________________
         |  |  |  |  |      |
         --------------------
      top  
      ___      pop:  top--
     | 0 |     push: top++
     -----

capacity = 200, dynamic allocate

FIFO
====
Structure: first in first out
				 __________________
 out<---|                  |<---in
				--------------------
	head                     tail
	front                    back

Queue
-----
Create an empty queue
Enqueue an item into the queue
Dequeue an item from the queue
Look at the front item on the queue
Is the queue empty?
>>>>>>>>>>>>>>>>>>>
Look at the back item on the queue
Look at any item in the queue
How many items are in the queue?

#include <queue>
using namespace std;

int main()
{
	queue<int> s;
	s.push(10);
	s.push(20);
		// n will be 10.
	int n = s.front();
	s.pop();
	if ( ! s.empty())
	{
		cout << s.back() << endl;
		cout << s.size() << endl;
	}
}
