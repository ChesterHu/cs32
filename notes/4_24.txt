// Implement stack in array
// ------------------------
//           _______________
//          |___|___|___|___|
//         /                 \        size = top - start
//       start               top 
//
// Implement stack in linked list
// ------------------------------
//             ___
// top------->|   |old
//  \        ^|___|
//   \      /  
//    v___ /
//    |   |new
//    |___|

// When "push" data, add a new node in the front of the list, and let top points to new node.

// Implement queue in array
// ------------------------
//       _____________... ...___________________
//      |__|__|__|__|_... ..._|__|__|__|__|__|__|
//       ^         ^
//       |         |
//      head      tail
// When enqueue, add item at tail, when dequque, move head foward 1 block. But when the tail hits the end of array
//   1. Shift all data to the beginning of array.
//   2. Let tail points to the front of the array (circluar array & ring buffer), use a int to record the number of items in the array.

// Shape.h
// -------
class Shape
{
  void move(double xnew, double ynew);
  void draw() const;
};

Circle.h
--------
class Circl : public Shape  // A Circle is a kind of shapee
{
  public:
    void move(double xnew, double ynew);
    void draw() const;
  private:
    double m_x;
    double m_y;
    double m_r;
};

// Rectangle.h
// -----------
class Rectangle : public Shape
{
  public:
    void move(double xnew, double ynew);
    void draw() const;
  private:
    double m_x;
    double m_y;
    double m_dx;
    double m_dy;
}

void f(Circle& c)
{
  c.move(10, 20);
  c.draw();
}

void f(Rectangle & r)
{
  r.move(10, 20);
  r.draw();
}

//  generalization:                   Mammal
//   (superclass)                  /    |    \
//    base class                  /     |     \
//                               /      |      \
//  specialization            Dog     Gopher   Monkey
//   (subclasses)
//   derive class

Shape pic[100]
pic[0] = new Circle;
pic[1] = new Rectangle;
pic[2] = new Circle;

// Derived* ---> Base*
// Derived& ---> Base&
