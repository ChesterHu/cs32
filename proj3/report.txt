Game class
==========

The game class has data members: 
	1. int m_rows; the number of rows of the game board.
	2. int m_cols; the number of cols of the game board.
	3. int m_nShips; the number of ships in the game.
	4. Ship m_Ships[255]; array record all ships in the game.
The game has a private data struct Ship, which includes:
	1. int ShipLength; the ship length.
	2. char shipSymbol; the ship symbol.
	3. string shipName; the shipName.
When the Game add a ship, the m_nShips++, and add the Ship to the end of m_Ships.

Board class
===========

The implementation of Board class has the following data members:
	1. const Game& m_game; the reference of Game object that includes this board
	2. int m_placedShips; is an array of int, m_placedShips[i] is the health of the ship with shipID == i. If m_placedShips[i] == 0, in this situation 
	   if the board has placed all ships of a player, then ship i is destroyed in an attack, otherwise, the ship is still not been placed.
	3. char** m_Board; is the 2-dimension array of char to recored the board status.
	4. int m_health; is the total health of the board, when the health is 0, all ships should have been destroyed.
When place a ship with ship id == i, Board class will set m_placedShips[i] = ship length, and accumulate m_health by ship length.
It will set m_placedShips[i] = 0 and decrease m_health by ship length thing when unplace the ship. When Board class make an attack, make record on m_Board.
The play function of game will first check if both boards' m_health is above 0, then recommend attack from p1, attack on board b2, p2 record attack. then 
recall play function but swap position of p1 and p2.

GoodPlayer class
================

The implemenation of GoodPlayer class has the following data members:
	1. char** hitMap; a 2-dimention array to record opponent's board status
	2. int direction; a data to record state: 0 - 4 correspond to NONE, NORTH, SOUTH, WEST, EAST
	3. int m_step; the searching step
	4. stepLength; the step length from center points
	5. vector<int> shipsOfOpponent; a vector to record all opponent's ships' length
	6. vector<Point> centerPoints;
	7. vector<Point> hitPoints;
The GoodPlayer also has two main state:

state 1
-------
	The GoodPlayer will hit randomly in the board, but with a certain constraint: it will only randomly hit hitMap[r][c] such that (r + c) % m_step == 0. 
	Where m_step is the length of smallest opponent's ship, and it will be updated if the smallest ship is destroyed. Once the GoodPlayer hit a ship, it 
	will first push the hit point into centerPoints and hitPoints, then go the state 2.

state 2
-------
	When GoodPlayer in state 2, it may in 4 different states corresponds to 4 directions. If it was in state 1 in last attack, it will choose the direction
	such that: if GoodPlayer starts from centerPoints.back() and follow the particular direction, it will have more continuous '.' than any other directions.
	If the GoodPlayer hit a ship it will push the point into hitPoints. Once the Good player destroy a ship, it will backtrack the ship's place and push all
	all points from hitPoints to centerPoints such that are not belong to the destroyed ship, then recall recommendAttack function.

Pseudocode
==========

bool MediocrePlayer::placeShips(Board& b)
{
	int nShips = game().nShips();
	int nRows = game().rows(); int nCols = game().cols();
	for 0:50  // try 50 times
	{
		b.block();  // block b
		if (placeShipsRecursively(b, 0, nShips, nRows, nCols))
			return true;
		b.unblock();
	}
	return false;
}

void MediocrePlayer::placeShipsRecursively(Board& b, int& placedNumShips, int& totalNumShips, int& maxRows, int& maxCols)
{
	if (placedNumShips == totalNumShips)
		return true;
	for r = 0 : maxRows
		for c = 0 : maxCols
			for k = 0 : game().nShips
			{
				if place ship k on board[r][c] HORIZONTAL returns true
				{
					if placeShipsRecursively(b, placedNumShips + 1, totalNumShips, maxRows, maxCols) true
						return true;
				}

				if place ship k on board[r][c] VERTICAL returns true
				{
					if placeShipsRecursively(b, placedNumShips + 1, totalNumShips, maxRows, maxCols) true
						return true;
				}	
			}
	return false;
}

// the placeShips() of good player has the similar logic with Mediocre player, but it will also block the good player's data member hitMap in a sqare centered by the placed ship, and 
// check the hitMap[r][c] is '.' before place another ship.

void GoodPlayer::recordAttackResult(Point p, bool validShot, bool shotHit, bool shipDestroyed, shipId)
{
	if a validHit
	{
		hitMap[p.r][p.c] = 'X';  // mark the place
		if (shotHit && shipDestroyed)
		{
			if centerPoints not empty
				centerPoints.pop();
			for every points in hitPoints
				find those points not belong to shipId, and push them into centerPonts;
			hitPoints.clear();
			if centerPoints is empty
				set state to 1;
			else
				state = recommendDirection();  // find the best direction from centerPoints.back()
		}
		else if (shotHit)
		{
			if in state 1
				push point to centerPoints and state = recommendDirection();
			else
				step length++; // keep hit in that direction
		}
		else if (not state 1)  // if not hit but not in state 1
		{
			if hit length > 1
				hit in the opposite direction;
			else
				state = recommendDirection();
		}
	}
}
