Problem 1
=========

a.                       50
                         
			   20                  60
             
	      10         40                   70
		                                      
		     15    30                 65        80
					  							
				  25  35                      75

b. 

in-order: 10, 15, 20, 25, 30, 35, 40, 50, 60, 65, 70, 75, 80

pre-order: 50, 20, 10, 15, 40, 30, 25, 35, 60, 70, 65, 80, 75

post-order: 15, 10, 25, 35, 30, 40, 20, 65, 75, 80, 70, 60, 50

c.                     50
                         
			   25                  60
             
	      10         40                   70
		                                      
		     15    35                 65        80
					  							
				                             75
Problem 2
=========

a.
  // Tree class contains a tree node and child node
class tree
{
	public:
		  // constructor
		tree() : m_root(nullptr) {}
		  // destructor
		~tree() { delete m_root; }
		  // insert new node
		void insertNode(const int val);
	private:
		struct Node
		{
			int data;
			Node* parent;
			Node* left;
			Node* right;
			  // constructor of Node
			Node(int val)
			{
				data = val;
				parent = left = right = nullptr;
			}

			  // destructor of Node
			~Node()
			{
				delete left;
				delete right;
			}

		};

		Node* m_root;
};

b. 
  // the function for inserting a node to BST
void tree::insertNode(const int val)
{
	Node** ptr = &m_root;           // a pointer points to the pointer of a tree Node
	Node* curr = nullptr;           // the parent of current tree Node
	
	while(*ptr != nullptr)                                              // while the pointer ptr is not nullptr
	{
		if ((*ptr)->data == val)                                        // if the pointed pointer's data equals to the target value, return
			return;
		curr = *ptr;                                                    // assign the pointed pointer to the parent pointer
		ptr = (curr->data > val) ? &(curr->left) : &(curr->right);      // if target value is less than the current Node's value, then let ptr point to the left pointer, 
	}                                                                   // otherwise point to the right pointer.
	*ptr = new Node(val);    // allocate new Node on the pointed pointer
	(*ptr)->parent = curr; // let new Node's parent points to current Node.
}

Problem 3
=========

a. The result of the heap in tree representation.       
         8
     3       6
   0   2   4

b. The heap represented in an array.
  8 3 6 0 2 4

c. The heap represented in an array after one more remove.
  6 3 4 0 2

Problem 4
=========

a. O(C + S);
b. O(log C + S);
c. O(log C + log S);
d. O(log S);
e. O(1);
f. O(log C + S);
g. O(S * log S);
h. O(C * log S);
